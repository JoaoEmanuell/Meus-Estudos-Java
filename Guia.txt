Default:

	static tipo_retorno nome(tipo_primitivo nome_paramentro){
		bloco
    }

	tipo_retorno é o tipo primitivo do valor do retorno, caso não 
	exista nenhum coloque "void", caso tenha paramentros declare da 
	seguinte maneira, "tipo_primitivo nome_paramentro" caso tenha 
	mais de um coloque uma , depois e repita o processo, caso tenha 
	um retorno coloque "return retorno;", lembre-se que o tipo do 
	retorno deve ser especificado em tipo_retorno.

	// linha de comentario

	while (condição){
		bloco
		condição++; //para não entrar em loop infiinito
	}// loop com saida

	while (true){
		bloco
	} // loop infinito

	for (var_inicial; condição; incremento //var_ini++){
		bloco
	}// loop com saida

	for (;;){
		bloco
	}// loop infinito

Váriaveis:

	var nome = dados; ou
	tipo nome = dados; //Esse modo funciona em modos antigos do java

	nome = cont; // Reescreve o valor da var

	tipo nome; // Dessa forma eu só declarei a var mas não adicionei 
	nada a ela

	Tipo_primitivo[] nome = cria um paramentro ou uma var que pode 
	receber diversos itens de um tipo especifico, ou seja uma lista.
	
	final tipo_primitivo nome = valor; //var constante ou seja uma var imutavel.

Conversão:

	Float.parseFloat(elemento); = converte o elemento para um 
	elemento float

Condições:

	var.equals(condição) = caso a variavel seja igual a condição 
	estabelecida ele irá definir com True, útil para IF, seria equivalente 
	ao == mas aparentemente isso não existem em Java.

Random:

	import java.util.Random; // importa o util.Random.

	// Random serve para randorizar itens.


	Random nome = new Random(); = cria uma var com o tipo aleatoria que 
	recebe um novo objeto com as propiedades da classe Random.

	random_var.nextInt(limite); = irá gerar um número inteiro 
	aleatorio baseado no limite.

Pacotes:

	Para criar uma var que use um pacote importado use:

	Tipo var = new Tipo();

	Normalmente o Tipo sempre vai se referir ao nome do pacote.

	Para criar um pacote crie uma pasta e na classe em que você 
	deseja coloque:

	package mome.da.pasta;

	É importante ressaltar que ao invés de usar espaços você usa .

	E para importar é só usar:

	import nome.da.pasta.Class;

Scanner:

	import java.util.Scanner;// Importa Scanner, pacote util para 
	interação via terminal.

	Scanner scanner = new Scanner(System.in); // var que recebe o objeto de 
	interação com o pacote Scanner, obrigatoriamente ele irá pedir do 
	"System.in" como paramentro.
        
	scanner.nextLine(); // Espera que o user digite algo na proxima linha.
	
VISIBILIDADE DE ESCOPO:

	//No caso eu me referi sempre a var, porém com exeção ao default para funções, todas as regras se aplicam.
	
	A visibilidade de escopo, possui 4 tipos:

	default

	public

	private

	protected

	======================================================

	visibilidade static tipo_primitivo nome; //declara a várivel

	======================================================

	default: 

		Quando você coloca a var sem declarar nada na 
		frente, ela pode ser acessada por qualquer 
		classe que esteja dentro do pacote onde essa 
		var se encontra.

		default static tipo_primitivo nome;
		
		Nesse caso a palavra "default" é opcional, uma 
		vez que toda declaração de var automaticamente 
		é criada como default
		
	public:

		Quando se informa "public" como visibilidade 
		de escopo, automaticamente essa var se torna 
		acessavel por qualquer pacote desde que o 
		pacote importe a classe que está var está 
		informada.
		
		public static tipo_primitivo nome;
		
	private:

		Quando se informa "private" como visibilidade 
		de escopo, automaticamente essa var só se 
		torna acessavel dentro da propia classe, mesmo
		se um pacote possuir a importação dela, essa
		var não poderá ser acessada pois ela é 
		"privada" ao pacote especificado
		
		private static tipo_primitivo nome;
		
	protected:

		Isso ainda não foi explicado :/
	/*

	Isso tudo também se aplica ao conceito de funções, com exceção ao default, ele não existe nas funções.

	*/
