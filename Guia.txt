Default:

	static tipo_retorno nome(tipo_primitivo nome_paramentro){
		bloco
    }

	tipo_retorno é o tipo primitivo do valor do retorno, caso não 
	exista nenhum coloque "void", caso tenha paramentros declare da 
	seguinte maneira, "tipo_primitivo nome_paramentro" caso tenha 
	mais de um coloque uma , depois e repita o processo, caso tenha 
	um retorno coloque "return retorno;", lembre-se que o tipo do 
	retorno deve ser especificado em tipo_retorno.

	// linha de comentario

	while (condição){
		bloco
		condição++; //para não entrar em loop infiinito
	}// loop com saida

	while (true){
		bloco
	} // loop infinito

	for (var_inicial; condição; incremento //var_ini++){
		bloco
	}// loop com saida

	for (;;){
		bloco
	}// loop infinito
	
	if (condição){// if simples
	    bloco
    } else if (condição) {// senão se
        bloco
    } else {// senão
        bloco
    }

Váriaveis:

	var nome = dados; ou
	tipo nome = dados; //Esse modo funciona em modos antigos do java

	nome = cont; // Reescreve o valor da var

	tipo nome; // Dessa forma eu só declarei a var mas não adicionei 
	nada a ela

	Tipo_primitivo[] nome = cria um paramentro ou uma var que pode 
	receber diversos itens de um tipo especifico, ou seja uma lista.
	
	final tipo_primitivo nome = valor; //var constante ou seja uma var imutavel.

Conversão:

	Float.parseFloat(elemento); = converte o elemento para um 
	elemento float

Condições:

	var.equals(condição) = caso a variavel seja igual a condição 
	estabelecida ele irá definir com True, útil para IF, seria equivalente 
	ao == mas aparentemente isso não existem em Java.

Random:

	import java.util.Random; // importa o util.Random.

	// Random serve para randorizar itens.


	Random nome = new Random(); = cria uma var com o tipo aleatoria que 
	recebe um novo objeto com as propiedades da classe Random.

	random_var.nextInt(limite); = irá gerar um número inteiro 
	aleatorio baseado no limite.

Pacotes:

	Para criar uma var que use um pacote importado use:

	Tipo var = new Tipo();

	Normalmente o Tipo sempre vai se referir ao nome do pacote.

	Para criar um pacote crie uma pasta e na classe em que você 
	deseja coloque:

	package mome.da.pasta;

	É importante ressaltar que ao invés de usar espaços você usa .

	E para importar é só usar:

	import nome.da.pasta.Class;

Scanner:

	import java.util.Scanner;// Importa Scanner, pacote util para 
	interação via terminal.

	Scanner scanner = new Scanner(System.in); // var que recebe o objeto de 
	interação com o pacote Scanner, obrigatoriamente ele irá pedir do 
	"System.in" como paramentro.
        
	scanner.nextLine(); // Espera que o user digite algo na proxima linha.
	
VISIBILIDADE DE ESCOPO:

	//No caso eu me referi sempre a var, porém com exeção ao default para funções, todas as regras se aplicam.
	
	A visibilidade de escopo, possui 4 tipos:

	default

	public

	private

	protected

	======================================================

	visibilidade static tipo_primitivo nome; //declara a várivel

	======================================================

	default: 

		Quando você coloca a var sem declarar nada na 
		frente, ela pode ser acessada por qualquer 
		classe que esteja dentro do pacote onde essa 
		var se encontra.

		default static tipo_primitivo nome;
		
		Nesse caso a palavra "default" é opcional, uma 
		vez que toda declaração de var automaticamente 
		é criada como default
		
	public:

		Quando se informa "public" como visibilidade 
		de escopo, automaticamente essa var se torna 
		acessavel por qualquer pacote desde que o 
		pacote importe a classe que está var está 
		informada.
		
		public static tipo_primitivo nome;
		
	private:

		Quando se informa "private" como visibilidade 
		de escopo, automaticamente essa var só se 
		torna acessavel dentro da propia classe, mesmo
		se um pacote possuir a importação dela, essa
		var não poderá ser acessada pois ela é 
		"privada" ao pacote especificado
		
		private static tipo_primitivo nome;
		
	protected:

		Isso ainda não foi explicado :/
	/*

	Isso tudo também se aplica ao conceito de funções, com exceção ao default, ele não existe nas funções.

	*/
	
TIPOS PRIMITIVOS:

	/* criação de var
		
		tipo_primitivo nome = valor;	
		
	*/
	
	int = armazena números inteiros // entre -2147483647 e 2147483647
	
	double = armazena números reais, com um limite de 64 bits //entre -9,2234×10¹⁸ e 9,2234×10¹⁸
	
	boolean = armazena True ou False;
	
	byte = armazena números até 127 e caracteres que podem ser convertidos para números. //entre -127 e 127

	char = armazena apenas um caractere especifico.

	short = ele é praticamente igual a um int, porém com menos espaço de alocação, ou seja ele não consegue armazera números gigantes. //
	entre -32767 e 32767

	long = ele é praticamente igual a um int, porém serve para alocar números gigantes, números que o int não poderia armazenar pois não 
	possui alocação suficiente, no final do número você deve colocar um L. //entre -9,2234×10¹⁸ e 9,2234×10¹⁸

	float = 32bits (menor que o double) tem que ser informado um f no final do número, o double armazena até 64bits. // entre -2147483647 e 2147483647

CONVERSÃO TIPOS PRIMTIIVOS:

	casting nada mais é do que a conversão de tipos primitivos:

		(tipo_novo) valor_tipo_antigo;
		
		Ele irá tentar converter, caso de algum erro ele irá retornar 0.
		
		(int) 62.39;
		
		Também serve se usar váriaveis.
	
	Lembresse que a conversão pode gerar percas, pois um espaço de alocação pode ser menor do que o outro.
	
MANIPULAÇÃO DE STRINGS:

	str.length() //tamanho da str

	str + "string literal" // concatena a str com uma str literal que você escreveu ou uma var

	str.contains("palavra") // verifica se a str contem uma palavra especificada

	str.indexOf("palavra") // verifica a partir de qual caractere uma palavra começa

	str.lastIndexOf("palavra") // verifica onde é a ultima vez que a palavra aparece

	str.toUpperCase() // faz todas as letras da str ficarem maisculas

	str.toLowerCase() // faz todas as letras da str ficarem minusculas

	str.trim() // remove os espaços no inicio e no fim da str

	str.substring(number) // começa a escrever a frase a partir do caractere informado

	str.equals("Texto") // verifica se o paramentro é igual a str, pode se usar número, equals é uma comparação entre valores de str.
	
	== não compara o conteudo, ele compara a referencia dos objetos, ou seja ele verifica se o espaço de memoria é igual ao da outra var String, 
	caso não seja ele irá retornar false.

    string1.equals(string2) = verifica se uma string é identica a outra
    
ORIENTAÇÃO A OBJETO:

    private Tipo nome; // Cria uma propiedade dentro de um arquivo de classe mãe do java, normalmente propiedades são definidas como privadas e 
    alteradas por meio dos métodos
    
    public static tipo nome(paramentros) {
		
		bloco	
		
	} // Cria um método dentro da classe mãe, que na maioria das vezes altera o valor das propiedades ou retorna os mesmos para serem exibidos no arquivo princiopal.
	
	Nome_arquivo nome_objeto = new Nome_arquivo(); // cria um objeto que tem todos os atributos da classe mãe.
	
	objeto.membro-ou-metodo = dado; // atribui dados aquele objeto, que não irá de maneira nenhuma interferir na classe mãe
	
	//SETTERS, normalmente servem para setar um valor para as propiedades
	
	public void setNomePropiedade (Tipo nomePropiedadeParamentro){
	
        this.nomePropiedadeVar = nomePropiedadeParamentro;
    }
    
    //GETTERS, normalmente servem para retornar um valor de determinada propiedade
    
    public tipo getNomePropiedade (){
        return nomePropiedade;
    }
    
ARRAYS:

    ClasseMãe[] nomeobjeto = new ClasseMãe[quantidade]; // cria um objeto array que tem determinado tamanho.
    
    ClasseMãe nomeobjeto1 = new ClasseMãe; nomeobjeto1 = dados; nomeobjeto[pos] = nomeobjeto1; // Crie um objeto, atribua valores a ele e adicione ele no ponto desejado do objeto array.
    
    array.length; // retorna o tamanho da array
    
    Arrays.sort(array); // faz com que os itens do array sejam organizados em ordem alfanumerica.

    System.out.println(array); // imprime o hashcode do array.

    System.out.println(Arrays.toString(array)); // converte o array para string, fazendo com que ele possa ser impresso.
    
    Arrays.equals(array1, array2); // Verifica se o conteudo de um array é igual ao conteudo do outro.
    
CONSTRUTOR:

    /* Construtor é basicamente uma função que é chamada por padrão assim que sua classemãe é chamada, ela normalmente serve para atribuir 
    valores as propiedades de forma obrigatoria, valores que devem ser passados assim que o objeto é criado */
    
    public NomeClasse (Paramentros){
        bloco
    } // Cria o construtor, no campo dos paramentros você deve inserir o nome das propiedades (como se fossem os Setters)
    
    /* No código você irá fazer da seguinte maneira: */
    
    ClasseMãe[] nomeobjeto = new ClasseMãe[]{
        new ClasseMãe(Paramentros),
    }
    
    /*Dessa forma ele irá automaticamente atribuir o valor dos paramentros a classe, assim quando você quiser visualizar os dados atribuidos você 
    faz da seguinte maneira:*/

    nomeobjeto[pos].metodo();

    /*Dessa forma ele irá acessar o objeto que está na posição especificada.*/
    
LISTAS (Arraylist):

    List<ClasseMãe> nomeobjeto = new ArrayList<>(); // Cria uma objeto que tenha uma lista com classe mãe.
    
    nomeobjeto.add(objeto); // Adicionar um objeto ao objeto lista
    
    nome objeto.get(pos); // Retorna o que está armazenado na pos especifica da lista
    
    Arrays.fill(array, valor); // Preenche todos os espaços do array com o valor indicado.
    
    arraylist.size() // Retorna o tamanho total do arraylist

    arraylist.indexOf(dado) // Retorna a posição em que o dado se encontra, caso não encontre o dado ele retorna -1

    arraylist.isEmpty() // Verifica se a lista está vaiza ou não

    arraylist.contains(dado) // Verifica se a lista possui determinado dado, se possui retorna verdadeiro, senão retorna falso.

    arraylist.clear() // Limpa de vez a lista, remove todos os elementos da mesma, clear tem o retorno como void, por isso não irá ter retorno. 
    
    Collections.sort(lista); // ordena os itens da lista.
    
    for (Tipo nomeparamentro: lista) {
        System.out.println(nomeparamentro); //pode ser um bloco 
        } // Esse é o foreach, para cada elemento do tipo nomeparamentro na lista, escreva o nomeparamentro, serve para como se fosse um for 
        porém muito mais simples.
